set.seed(12345)
inTrain <- createDataPartition(y=newTrain$classe, p=0.6, list=FALSE)
myTraining <- newTrain[inTrain, ]; myTesting <- newTrain[-inTrain, ]
dim(myTraining)
dim(myTesting)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
modFitRF <- randomForest(classe ~ ., data=inTraining)
predictionsRF <- predict(modFitRF, inTesting, type = "class")
confusionMatrix(predictionsRF, inTesting$classe)
inTraining <- newTrain[inTrain, ]; inTesting <- newTrain[-inTrain, ]
modFitRF <- randomForest(classe ~ ., data=inTraining)
predictionsRF <- predict(modFitRF, inTesting, type = "class")
confusionMatrix(predictionsRF, inTesting$classe)
train<-train[,(colSums(is.na(train))/nrow(train)) > 0.8]
train<-read.csv("pml-training.csv")
train<-train[,(colSums(is.na(train))/nrow(train)) > 0.8]
str(train)
train<-read.csv("pml-training.csv")
train<-train[,!((colSums(is.na(train))/nrow(train)) > 0.8)]
str(train)
trainNZV<-nearZeroVar(train,saveMetrics=TRUE)
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
trainNZV<-nearZeroVar(train,saveMetrics=TRUE)
trainNZV
train<-read.csv("pml-training.csv")
train<-train[,colSums(is.na(train)) == 0]
dim(train)
train <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
train<-train[,colSums(is.na(train)) == 0]
dim(train)
trainNZV<-nearZeroVar(train,saveMetrics=TRUE)
trainNZV
train <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
test <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
#train<-train[,!((colSums(is.na(train))/nrow(train)) > 0.8)]
train<-train[,colSums(is.na(train)) == 0]
test<-train[,colSums(is.na(test)) == 0]
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
trainNZV<-nearZeroVar(train,saveMetrics=TRUE)
testNZV<-nearZeroVar(test,saveMetrics=TRUE)
trainNZV
testNZV
train <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
test <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
train<-train[,!((colSums(is.na(train))/nrow(train)) > 0.8)]
test<-test[,!((colSums(is.na(test))/nrow(test)) > 0.8)]
train<-train[,colSums(is.na(train)) == 0]
test<-train[,colSums(is.na(test)) == 0]
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
trainNZV<-nearZeroVar(train,saveMetrics=TRUE)
testNZV<-nearZeroVar(test,saveMetrics=TRUE)
trainNZV
testNZV
dim(trainNZV)
dim(testNZV)
set.seed(2525)
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
inTraining <- newTrain[inTrain, ]; inTesting <- newTrain[-inTrain, ]
set.seed(2525)
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
inTraining <- train[inTrain, ]; inTesting <- train[-inTrain, ]
modFitDT <- rpart(classe ~ ., data=inTraining, method="class")
predictionsDT <- predict(modFitDT, inTesting, type = "class")
confusionMatrix(predictionsDT, inTesting$classe)
modFitRF <- randomForest(classe ~ ., data=inTraining)
predictionsRF <- predict(modFitRF, inTesting, type = "class")
confusionMatrix(predictionsRF, inTesting$classe)
submitPredict <- predict(modFitRF, test, type="class")
submitPredict
test
dim(test)
test <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
dim(test)
test<-test[,!((colSums(is.na(test))/nrow(test)) > 0.8)]
dim(test)
test <-test[,-c(1:7)]
dim(test)
submitPredict <- predict(modFitRF, test, type="class")
submitPredict
training  <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testing  <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myNZVvars <- names(myTraining) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTraining <- myTraining[!myNZVvars]
#To check the new N?? of observations
dim(myTraining)
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining #creating another subset to iterate in loop
for(i in 1:length(myTraining)) { #for every column in the training dataset
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
#To check the new N?? of observations
dim(trainingV3)
myTraining <- trainingV3
rm(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58]) #already with classe column removed
myTesting <- myTesting[clean1]
testing <- testing[clean2]
#To check the new N?? of observations
dim(myTesting)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
#And to make sure Coertion really worked, simple smart ass technique:
testing <- rbind(myTraining[2, -58] , testing) #note row 2 does not mean anything, this will be removed right.. now:
testing <- testing[-1,]
modFitB1 <- randomForest(classe ~. , data=myTraining)
predictionsB1 <- predict(modFitB1, myTesting, type = "class")
confusionMatrix(predictionsB1, myTesting$classe)
predictionsB2 <- predict(modFitB1, testing, type = "class")
predictionsB2
data(father.son)
library(Usingr)
library(UsingR)
data(father.son)
father.son
?father.son
str(father.son)
zz<-father.son
zz
test<-lm(sheight ~ fheight,data=zz)
test
summary(test)
predict(test)
testSam<-zz[1]
testSam
testSam<-zz[1,1]
testSam
testSam<-zz[,1]
testSam
head(zz)
predict(test,65)
?predict
predict(test,value=65)
data<-read.csv("repdata-data-StormData.csv")
str(data)
data<-read.csv("hospital-data.csv")
str(data)
data$Hospital.Type
unique(data$Hospital.Type)
str(data)
unique(data$Hospital.Ownership)
unique(data$Emergency.Services)
data(father.son)
father.son
zz<-lm(sheight ~fheight,data=father.son)
zz
plo(zz)
plot(zz)
predict(zz)
predict(zz)[1]
father.son[1]
father.son[1,]
predict(zz)[1]
predict(zz)[2]
predict(zz)[1,]
testo<-father.son[1,]
testo
predict(zz,testo)
father.son[1:10,]
what<-father.son[1:10,]
predict(zz,what)
data(babies)
babies
str(babies)
?babies
library(ggplot2)
data(mtcars)
attach(mtcars)
mtcars$cyl  <- factor(mtcars$cyl)
mtcars$vs   <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am   <- factor(mtcars$am,labels=c("Auto","Manual"))
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", label="Figure 1")
boxplot(wt ~ am,data=mtcars)
amModel<-lm(mpg ~ am,data=mtcars)
allModel<-lm(mpg ~ .,data=mtcars)
filtModel<-step(allModel,direction="both")
anova(amModel,filtModel)
par(mfrow=c(2, 2))
plot(filtModel)
pairs(mpg ~ cyl+hp+wt+am,panel=panel.smooth,data=mtcars)
filtModel
mtcars[,1]
mtcars[1,]
woot<-mtcars[1,]
predict(filtModel,woot)
woot<-mtcars[1:10,]
predict(filtModel,woot)
woot
filtModel
gg<-data.frame(4,80,2.650,"Manual")
gg
names(gg)<-c("cyl","hp","wt","amManual")
gg
predict(filtModel,gg)
str(gg)
str(mtcars)
gg
gg$cyl<-as.factor(gg$cyl)
str(gg)
predict(filtModel,gg)
str(mtcars)
names(gg)<-c("cyl","hp","wt","am")
gg
predict(filtModel,gg)
max()
?ma
?max
max(mtcars$tw)
max(mtcars$wt)
min(mtcars$wt)
gg
test<-c(4,80,5.650,"Manual")
rbind(gg,test)
gg
gg<-rbind(gg,test)
gg
predict(filtModel,gg)
gg
gg[1,1]
gg[1,]
gg[2,]
predict(filtModel,gg[1,])
str(gg)
gg$hp<-as.number(gg$hp)
gg$hp<-as.numeric(gg$hp)
gg$wt<-as.numeric(gg$hp)
str(gg)
str(mtcars)
predict(filtModel,gg)
gg
gg$wt<-c(2.506,3.305)
gg
predict(filtModel,gg)
haha<-function(cyl,hp,startWt,endWt,step,transType){
print(cyl,hp)
}
haha(1,3)
haha(6,3)
haha<-function(cyl,hp,startWt,endWt,step,transType){
data<-data.frame(cyl,hp,startWt,transType)
nextWt<-startWt+step
while (nextWt<=endWt)
{
addData<-c(cyl,hp,nextWt,transType)
data<-rbind(data,addData)
nextWt<-nextWt+step
}
names(data)<-c("cyl","hp","wt","am")
data$cyl<-as.factor(data$cyl)
data$am<-as.factor(data$am)
data$hp<-as.numeric(data$hp)
data$wt<-as.numeric(data$wt)
data
}
haha(4,10,1.000,1.500,0.100,"auto")
woot<-haha(4,10,1.000,1.500,0.100,"auto")
woot
predict(filtModel,woot)
str(mtcars)
woot<-haha(4,10,1.000,1.500,0.100,"Auto")
woot
predict(filtModel,woot)
plot(woot$wt,predict(filtModel,woot))
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
testo
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(mtcars)
attach(mtcars)
mtcars$cyl  <- factor(mtcars$cyl)
mtcars$vs   <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am   <- factor(mtcars$am,labels=c("Auto","Manual"))
allModel<-lm(mpg ~ .,data=mtcars)
filtModel<-step(allModel,direction="both")
buildPlot<-function(cyl,hp,startWt,endWt,step,transType){
data<-data.frame(cyl,hp,startWt,transType)
nextWt<-startWt+step
while (nextWt<=endWt)
{
addData<-c(cyl,hp,nextWt,transType)
data<-rbind(data,addData)
nextWt<-nextWt+step
}
names(data)<-c("cyl","hp","wt","am")
data$cyl<-as.factor(data$cyl)
data$am<-as.factor(data$am)
data$hp<-as.numeric(data$hp)
data$wt<-as.numeric(data$wt)
plot(woot$wt,predict(filtModel,data))
}
buildPlot<-function(cyl,hp,startWt,endWt,step,transType){
data<-data.frame(cyl,hp,startWt,transType)
nextWt<-startWt+step
while (nextWt<=endWt)
{
addData<-c(cyl,hp,nextWt,transType)
data<-rbind(data,addData)
nextWt<-nextWt+step
}
names(data)<-c("cyl","hp","wt","am")
data$cyl<-as.factor(data$cyl)
data$am<-as.factor(data$am)
data$hp<-as.numeric(data$hp)
data$wt<-as.numeric(data$wt)
plot(data$wt,predict(filtModel,data))
}
buildPlot(4,80,1.2,2.1,0.1,"Auto")
buildPlot(4,80,1.7,2.1,0.1,"Auto")
buildPlot(4,80,1.7,2.1,0.1,"Manual")
buildPlot(4,80,1.7,2.1,0.1,"Manual")
buildPlot(4,80,1.7,2.1,0.1,"Auto")
buildPlot(4,80,1.7,2.7,0.1,"Auto")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(devtools)
library("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
train <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
test <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
train<-train[,!((colSums(is.na(train))/nrow(train)) > 0.8)]
test<-test[,!((colSums(is.na(test))/nrow(test)) > 0.8)]
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
trainNZV<-nearZeroVar(train,saveMetrics=TRUE)
testNZV<-nearZeroVar(test,saveMetrics=TRUE)
set.seed(2525)
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
inTraining <- train[inTrain, ]; inTesting <- train[-inTrain, ]
#decision Tree
modFitDT <- rpart(classe ~ ., data=inTraining, method="class")
predictionsDT <- predict(modFitDT, inTesting, type = "class")
confusionMatrix(predictionsDT, inTesting$classe)
#Random Forest
modFitRF <- randomForest(classe ~ ., data=inTraining)
predictionsRF <- predict(modFitRF, inTesting, type = "class")
confusionMatrix(predictionsRF, inTesting$classe)
submitPredict <- predict(modFitRF, test, type="class")
runApp()
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
train <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
test <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
train<-train[,!((colSums(is.na(train))/nrow(train)) > 0.8)]
test<-test[,!((colSums(is.na(test))/nrow(test)) > 0.8)]
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
trainNZV<-nearZeroVar(train,saveMetrics=TRUE)
testNZV<-nearZeroVar(test,saveMetrics=TRUE)
set.seed(2525)
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
inTraining <- train[inTrain, ]; inTesting <- train[-inTrain, ]
#decision Tree
modFitDT <- rpart(classe ~ ., data=inTraining, method="class")
predictionsDT <- predict(modFitDT, inTesting, type = "class")
confusionMatrix(predictionsDT, inTesting$classe)
#Random Forest
modFitRF <- randomForest(classe ~ ., data=inTraining)
predictionsRF <- predict(modFitRF, inTesting, type = "class")
confusionMatrix(predictionsRF, inTesting$classe)
submitPredict <- predict(modFitRF, test, type="class")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(submitPredict)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?mtcars
runApp()
shinyapps::setAccountInfo(name='jasonlim87', token='A4E2897E6598147C0842B2C685B3977A', secret='bdE/67+G03w9PLtmTfjOtOx5n5nzq4d22Ag4Zmlj')
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
library(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='jasonlim87', token='A4E2897E6598147C0842B2C685B3977A', secret='bdE/67+G03w9PLtmTfjOtOx5n5nzq4d22Ag4Zmlj')
install.packages("rsconnect")
shinyapps::setAccountInfo(name='jasonlim87', token='A4E2897E6598147C0842B2C685B3977A', secret='bdE/67+G03w9PLtmTfjOtOx5n5nzq4d22Ag4Zmlj')
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
library(stringr)
library(stringrd)
setwd("C:\Users\Jason\Documents\MPGCalc\MPGCalcSalesPitch")
getwd()
setwd("C:/Users/Jason/Documents/MPGCalc/MPGCalcSalesPitch")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
slidify("index.Rmd")
getwd
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
